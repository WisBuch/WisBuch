<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Introduction to Programming Using Java</title>
    <link rel="icon" href="img/E.jpg" type="image/x-icon">

    <style>
      * {
        margin: 0px;
        padding: 0px;
        box-sizing: border-box;
      }
      body{
        background-color: #e6ccb2;
        overflow-x: hidden;
      }
      body.dark-mode {
        background-color: #222;
        color: #e6ccb2; /* Change text color for better readability */
      }
      .education8 {
        font-family: 'Lucida Sans', 'Lucida Sans Regular';
        padding: 25px;
        margin-top: 25px;
        margin-left: 2.5%;
        margin-right: 2.5%;
        text-align: justify;  
      }
      h1{
        text-align: center;
      }
      h2{
        text-align: center;
      }
      .first-letter {
        font-size: 50px;
        font-family: serif;
        font-weight: bolder;
      }
      .action-buttons {
        position: fixed;
        top: 2px;
        right: 20px;
        display: flex;
        flex-direction: column;
        gap: 3px;
        transition: top 0.3s; /* Smooth transition for button hide/show */
        z-index: 1; /* Ensure it's behind h1 */
      }
      .action-button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }
      #darkModeToggle {
        background-color: #000;
        color: #e6ccb2;
      }
      #addToLibraryButton {
        background-color: #000;
        color: #e6ccb2  ;
      }
      body.dark-mode #darkModeToggle {
        background-color: #e6ccb2;
        color: #000;
      }
      body.dark-mode #addToLibraryButton {
        background-color: #e6ccb2;
        color: #000  ;
      }
@media screen and (max-width: 768px) {
    .action-buttons {
        top: 1px;
        right: 10px;
    }
    h1 {
        margin-top: 40px;
    }
}
@media screen and (max-width: 480px) {
    .action-buttons {
        top: 1px;
        right: 5px;
    }
    h1 {
        margin-top: 20px;
    }
}
    </style>

</head>
<body>
   <!-- Action Buttons -->
   <div class="action-buttons" id="actionButtons">
       <!-- Dark Mode Toggle Button -->
       <button id="darkModeToggle" class="action-button" onclick="toggleDarkMode()"> ☽</button>
       <!-- Add to Library Button -->
       <button id="addToLibraryButton" class="action-button" onclick="addToLibrary('Introduction to Programming Using Java')">+</button>
   </div>

      <div class="education8">
        <h1>Introduction to Programming Using Java</h1>
        <h2>By: David J. Eck Hobart and William Smith Colleges</h2> <br> <br>
        <p> A computer is a complex system consisting of many different components. But at the heart—or the brain, if you want—of the computer is a single component that does the actual computing. This is the Central Processing Unit, or CPU. In a modern desktop computer, the CPU is a single “chip” on the order of one square inch in size. The job of the CPU is to execute programs.</p><br>
        
        <p>A program is simply a list of unambiguous instructions meant to be followed mechanically by a computer. A computer is built to carry out instructions that are written in a very simple type of language called machine language. Each type of computer has its own machine language, and the computer can directly execute a program only if the program is expressed in that language. (It can execute programs written in other languages if they are first translated into machine language).</p><br>
        
        <p>When the CPU executes a program, that program is stored in the computer’s main memory (also called the RAM or random access memory). In addition to the program, memory can also hold data that is being used or processed by the program. Main memory consists of a sequence of locations. These locations are numbered, and the sequence number of a location is called its address. An address provides a way of picking out one particular piece of information from among the millions stored in memory. When the CPU needs to access the program instruction or data in a particular location, it sends the address of that information as a signal to the memory; the memory responds by sending back the data contained in the specified location. The CPU can also store information in memory by specifying the information to be stored and the address of the location where it is to be stored.</p><br>

        <p>On the level of machine language, the operation of the CPU is fairly straightforward (al-though it is very complicated in detail). The CPU executes a program that is stored as a sequence of machine language instructions in main memory. It does this by repeatedly reading, or fetching, an instruction from memory and then carrying out, or executing, that instruction. This process—fetch an instruction, execute it, fetch another instruction, execute it, and soon forever—is called the fetch-and-execute cycle. With one exception, which will be covered in the next section, this is all that the CPU ever does.</p><br>
 
        <p>The details of the fetch-and-execute cycle are not terribly important, but there are a few basic things you should know. The CPU contains a few internal registers, which are small memory units capable of holding a single number or machine language instruction. The CPU uses one of these registers—the program counter, or PC—to keep track of where it is in the program it is executing. The PC stores the address of the next instruction that the CPU should execute. At the beginning of each fetch-and-execute cycle, the CPU checks the PC to see which instruction it should fetch. During the course of the fetch-and-execute cycle, the number in the PC is updated to indicate the instruction that is to be executed in the next cycle. (Usually, but not always, this is just the instruction that sequentially follows the current instruction in the program).</p><br> 

        <p>A computer executes machine language programs mechanically—that is without understanding them or thinking about them—simply because of the way it is physically put together. This is not an easy concept. A computer is a machine built of millions of tiny switches called transistors, which have the property that they can be wired together in such a way that an output from one switch can turn another switch on or off. As a computer computes, these switches turn each other on or off in a pattern determined both by the way they are wired together and by the program that the computer is executing.</p><br>

        <p>Machine language instructions are expressed as binary numbers. A binary number is made up of just two possible digits, zero and one. So, a machine language instruction is just a sequence of zeros and ones. Each particular sequence encodes some particular instruction. The data that the computer manipulates is also encoded as binary numbers. A computer can work directly with binary numbers because switches can readily represent such numbers: Turn the switch on to represent a one; turn it off to represent a zero. Machine language instructions are stored in memory as patterns of switches turned on or off. When a machine language instruction is loaded into the CPU, all that happens is that certain switches are turned on or off in the pattern that encodes that particular instruction. The CPU is built to respond to this pattern by executing the instruction it encodes; it does this simply because of the way all the other switches in the CPU are wired together.</p><br>

        <p>So, you should understand this much about how computers work: Main memory holds machine language programs and data. These are encoded as binary numbers. The CPU fetches machine language instructions from memory one after another and executes them. It does this mechanically, without thinking about or understanding what it does—and therefore the program it executes must be perfect, complete in all details, and unambiguous because the CPU can do nothing but execute it exactly as written.</p><br> 

        <!-- Add to Library Button -->
</div>
</div>

<script>
  // Function to toggle dark mode
  function toggleDarkMode() {
      var body = document.body;
      body.classList.toggle('dark-mode');

      // Toggle button text based on mode
      var darkModeToggle = document.getElementById('darkModeToggle');
      if (body.classList.contains('dark-mode')) {
          darkModeToggle.textContent = ' ☀';
      } else {
          darkModeToggle.textContent = ' ☽';
      }
  }

  // Function to add a book to the library
  function addToLibrary(bookTitle) {
      // Get existing library data from local storage
      var libraryData = localStorage.getItem('library');

      var library = [];
      if (libraryData) {
          library = JSON.parse(libraryData);
      }

      // Check if the library has reached the maximum limit (10 books)
      if (library.length >= 10) {
          alert('You have reached the maximum limit of 10 books in your library.');
          return; // Stop execution if the limit is reached
      }

      library.push(bookTitle);

      localStorage.setItem('library', JSON.stringify(library));

      alert('The book has been added to your library!');

      displayLibrary();
  }

  var prevScrollPos = window.pageYOffset;
  var actionButtons = document.getElementById("actionButtons");

window.onscroll = function() {
if (window.pageYOffset === 0) {
    actionButtons.style.top = "10px";
    actionButtons.style.display = "flex";
} else {
    actionButtons.style.top = "-50px"; // Adjust this value based on the button height
    actionButtons.style.display = "none";
}
}
</script>
</body>
</html>