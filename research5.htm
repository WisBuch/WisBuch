<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>A Survey on Current Technologies for Web Development</title>
    <link rel="icon" href="img/E.jpg" type="image/x-icon">

<style>
* {
    margin: 0px;
    padding: 0px;
    box-sizing: border-box;

}
body{
    background-color: #e6ccb2;
    overflow-x: hidden;
}
body.dark-mode {
        background-color: #222;
        color: #e6ccb2; 
        }

.main-div{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    margin-top: 2%;
   
}
.research1 {
    font-family: 'Lucida Sans', 'Lucida Sans Regular';
    max-width: 600px;
    padding: 10px;
    font-size: large;
    margin-left: 5%;
    column-count: 1;
    text-align: justify;
}
.research2 {
    font-family: 'Lucida Sans', 'Lucida Sans Regular';
    max-width: 600px;
    padding: 10px;
    font-size: large;
    margin-left: 5%;
    column-count: 1;
    text-align: justify;
}
  
h1 {
    text-align: center;
    margin-top: 5%;
}

h2 {
    text-align: center;
    margin-top: .1%;
}

h3 {
    text-align: left;
}

h4 {
    text-align: center;
}
.first-letter{
    font-size: 50px;
    font-family: serif;
    font-weight: bolder;
}
      .action-buttons {
        position: fixed;
        top: 2px;
        right: 20px;
        display: flex;
        flex-direction: column;
        gap: 3px;
        transition: top 0.3s; /* Smooth transition for button hide/show */
        z-index: 1; /* Ensure it's behind h1 */
      }
      .action-button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }
      #darkModeToggle {
        background-color: #000;
        color: #e6ccb2;
      }
      #addToLibraryButton {
        background-color: #000;
        color: #e6ccb2  ;
      }
      body.dark-mode #darkModeToggle {
        background-color: #e6ccb2;
        color: #000;
      }
      body.dark-mode #addToLibraryButton {
        background-color: #e6ccb2;
        color: #000  ;
      }
@media screen and (max-width: 768px) {
    .action-buttons {
        top: 1px;
        right: 10px;
    }
    h1 {
        margin-top: 40px;
    }
}
@media screen and (max-width: 480px) {
    .action-buttons {
        top: 1px;
        right: 5px;
    }
    h1 {
        margin-top: 20px;
    }
}
    </style>

</head>
<body>
   <!-- Action Buttons -->
   <div class="action-buttons" id="actionButtons">
       <!-- Dark Mode Toggle Button -->
       <button id="darkModeToggle" class="action-button" onclick="toggleDarkMode()"> ☽</button>
       <!-- Add to Library Button -->
       <button id="addToLibraryButton" class="action-button" onclick="addToLibrary('A Survey on Current Technologies for Web Development')">+</button>
   </div>

    <h1>A Survey on Current Technologies for Web Development</h1>
        <h2>A. V. Akhil Krishna, Student</h2> 
        <h2> Dr. Padmashree T, Assistant Professor</h2>
        <p><center>Dept. of Information Science and Engineering, 
            R.V. College of Engineering, Bengaluru, India </center> </p>
        <p> <center>Dept. of Information Science and Engineering, 
            R.V. College of Engineering, Bengaluru, India </center></p><br>
    <h4> ABSTRACT </h4>
    <p><center><b><i>-Web-based application developers are presented with a
        dizzying variety of option formats, languages, frameworks and
        technological objects. We survey, identify and compare
        technologies that help the creation of Web apps. We conclude that,
        while the Web's connectivity problems have been largely solved,
        the cacophony of Web-based applications technologies represents
        the lack of a solid model tailored to this domain. </p> <br>
    <p> Keywords: Technology, NoSQL, MySQL, Angular, NodeJS </center> </i></b></p>
    <div class="main-div">
        <div class="research1">
            <h3> I. Introduction </h3>
                <p><br>The world has changed to a mobile era, but still today no app
                    could be as effective as web-based applications. The prevalence
                    of progressive web apps which perform functions identical to
                    mobile apps is surfacing on top of this. So, it's pretty clear that
                    web apps will remain and continue for a long time to come.
                    What makes this web applications worth investing in is the use
                    for development of high-end scalable technologies or in simpler
                    words, using state-of-the-art quality stack technology.
                    In addition, the business penetration and performance of the
                    application can be maximized with the most suitable
                    technology stack. The use of a poor technology stack could also
                    lead to a failure of the entire project. Therefore, it is important
                    to have a thorough look at the web development stack that will
                    be used for the development of a project. </p> <br>
            <h3>II. DIFFERENT SOLUTIONS </h3>
            <p> <br>This section reviews various technologies currently available for
            web development </p> <br>
            <p> 1. In [1] this paper it has presented a comparative study of
                non-relational databases and relational databases. It mainly
                focuses on presentation on one implementation of the
                NoSQL database technology, namely MongoDB, and
                draws a comparison with MYSQL which is another
                database and tries to justify why MySQL is less preferable
                and less efficient than MongoDB. It also discusses the
                disadvantages of using a relational database compared to a
                non-relational database.</p> <br>
            <p> The forum is developed using MongoDB, a NoSQL
                database chosen from a variety of non-relational databases.
                The database integration in the framework is also be
                presented. If the application is data-intensive and stores
                many data and queries, we can choose MongoDB instead of MySQL. It should also be noted that in certain situations,
                each user requires his or her own individual settings in the
                same application and connection database does not permit a
                full customization based only on the user's needs.
                Therefore, increasingly more applications start using a non-
                relational database, as they provide a more versatile
                framework that can be formed according to the needs of
                each user.</p> <br>
            <p> 2. The advantages of using AngularJS to create the front-end
                framework, NodeJS to design the Back-end Web server
                and the performance benefits of storing data based on
                MongoDB are discussed in [2] this paper. This paper
                concentrates on MongoDB storage solutions for the
                storage of large data and on MapReduce-based analysis
                solutions. This paper discusses on how Web services are
                designed that have the requirements of large data
                visualization based on NodeJS. Within this paper, the
                design of the express monitoring system is implemented.
                The primary technologies used in system design was first
                discussed. It also primarily introduces the framework
                architecture, MongoDB database-based storage solutions
                and the MapReduce-based analysis solutions. Finally, this
                paper introduces the Express Supervision Framework
                interface application and statistical analysis modules.
                Machine learning is to be used in future. </p> <br>
            <p> 3. In [3] this paper, it characterizes the runtime behaviors on
                an evolving server-side application JavaScript, Node.js,
                compared to JavaScript's client-side code. The runtime
                profile reveals that the V8 C++ library used for server load
                is spent a considerable amount (47.5% on average) of the
                total CPU time, while it is only 3.2% on the client-side.
                The study on the server-side system of complex call
                contexts shows that function calls to the V8 runtime to
                handle JavaScript objects lead significantly towards high
                CPU utilization in the V8 library. We focused on the
                overuse of the V8 library code with CPUs and analyzed
                the call stacks in detail during the execution of the library
                code. The function executes the C++ code of the server-
                side JavaScript framework which implements the node.js
                API, and native code in the package node module is one
                reason for the excess of the CPU use in the V8 library.</p> <br>
            <p> 4. In [4] this paper discusses the latest developments which
                received popularity in the server-side JavaScript space, Node.js. It's a framework for designing high-performance,
                concurrent programs that are based on asynchronous I/O
                and event driven programming model and not the
                multithreading approach. </p> <br> 
            <p> As we are aware that JavaScript knowledge is essential for
                exceptional UI interactions, the idea of using one
                programming language for everything becomes quite
                tempting. The architecture of Node.js makes it easy to use
                a functional and highly meaningful language for server
                programming, without any performance issues and
                stepping out of the programming mainstream. </p> <br>
            <p> 5. In [5] this paper few possible security measures are
                outlined to be aware of when using Node.js platform and
                server-side JavaScript. It also identifies two vulnerabilities
                and provides recommendations for the development and
                configuration of secure and resilient Node.js web
                applications.
                It analyzed the security implications of the architecture and
                technologies used in the Node.js platform. Two new denial
                of service vulnerabilities in the platform are discussed in
                the paper. Its analysis showed that while the platform is
                suitable for production use for some applications, it should
                be avoided in security critical applications. This is because
                the model is immature and other safety flaws are inherent.
                Security-conscious programming will avoid many of the
                problems we have highlighted. However, errors with
                Node.js applications are much more common as 
                programmers lack extensive experience in writing long-
                standing server-side JavaScript asynchronous applications. </p>
    </div>
    <div class="research2"> 
         <p> 6. In [6] this paper discusses the issues of utilizing the
            Aspect-Oriented Programming concept, and demonstrates
            this approach through Angular 2, a JavaScript framework
            and compares it with the traditional development
            approach.
            The new Angular framework develops better programming
            paradigms. TypeScript with type control and support for
            ANGULAR annotations provides a high degree of
            language sensation to the customer program. This will
            however increase the volume of code and restatement of
            information. This article addresses the library and makes
            form creation a better experience in this context. Easy
            library usage enables programmers to specify shape entries
            to a server application, when the entries are serialized into
            JSON and transmitted to the Angular. The rendering is
            carried out in the dynamic forms. Writing the code is
            easier, looks more comfortable and is much more durable.
            This is especially noteworthy when it comes to multiple
            types or supports context-aware user interfaces. The study
            shows an impact on reading, the volume of code and
            maintenance efforts for fragments in practice.</p> <br>
        <p> 7. In [7] In this paper, the specific characteristic traits of
            MongoDB and the design principles were studied and
            based on the analysis an anti-normal form model was
            proposed. This method is based on the theory of data
            dependency and uses a breakdown or joint data strategy to
            develop the logic schema of non-related databases for
            different dependencies. This article gives the application of MongoDB in BBS
            information collection system. The data storage structure
            and queries are designed, and the advantages and
            disadvantages of data structure, query and scalability are
            listed. Relational database contains several tables with
            external keys, a sharp decrease in query efficiency with a
            lot of data and high cost vertical scalability. </p> <br>
        <p> 8. In this paper [8] a pragmatic study was performed to
            understand how JavaScript developers make use of various
            language features and assist future extensions of
            JavaScript. The study displays that there is a clear
            uncertainty about newly introduced features. Tool
            developers can study the requirement for better IDEs and
            tools and programmers can study about the good parts of
            JavaScript. </p> <br>
        <p> 9. In this paper [9] it addresses the test and difficulty of the
            scalability, versatility and processing capacities of
            traditional relational database management systems
            (RDBMS) by incorporating hierarchical, semi-structural
            and unstructured data. The new frameworks require the
            databases to be scaled horizontally. The data in the
            databases must be stored and processed in various formats,
            including unstructured data. These questions are answered
            by NoSQL methodologies. The conventional approach to
            relationship and objective-driven DBMS can’t adapt to
            today's systems with the flexible scaling necessary.
            Similarly, large databases have been created. But
            specialized technologies that can support these databases
            have not emerged. These massive repositories can’t be
            preserved in a single physical device. A collaborative
            system for this is recommended. A NoSQL framework can
            be used with a particular objective to improve unstructured
            data processing. To investigate the merits of NoSQL
            databases, a NoSQL database, MongoDB which is
            document oriented, that typically uses JSON data is
            discussed. An administrative tool has been developed in
            the research to evaluate the MongoDB database scheme.
            There are two algorithms: one for local analysis and the
            other for aggregate analysis. Automated testing and real
            users tested the created solution. The solution was
            calculated to be quicker than the solutions already
            available. </p> <br>
        <p> 10. The aim of the paper [10] was to create a web
            administration interface for the MongoDB database to
            conduct analysis on the stored data. The needs of potential
            users and solutions similar that already existed were taken
            into accounts and the application was designed. The tool is
            composed of a console application that analyzes the results
            and a web application that visualizes the results. Console
            application can also be used and integrated into other tools
            separately. The app is quicker than existing solutions,
            more feature-rich and automatic testing and actual user
            testing have been performed. <br> 
            The system also has a solution for processing 3D parcels. It
            also proposes the use of Robots empowered with computer
            vision in material handling. Autonomous Guided Vehicles 
            which is a flexible solution are based on active sensors for
            self-orientation. This is seen as the best solution that
            removes most of the manual efforts in station loading and
            unloading and also in material handling with the premises. </p><br>

        <h3> References</h3>
            <p align='justify'><br>[1] Cornelia Győrödi, Robert Győrödi, George Pecherle , Andrada Olah,”
                A comparative study: MongoDB vs. MySQL”, 2015 13th International
                Conference on Engineering of Modern Electric Systems (EMES) </p>
            <p align='justify'>[2] Li Liang, Ligu Zhu, Wenqian Shang, Dongyu Feng, Zida Xiao,
                “Expresssupervision system based on NodeJS and MongoDB”, 2017
                IEEE/ACIS 16th International Conference on Computer and
                Information Science (ICIS) </p>
            <p align='justify'>[3] Takeshi Ogasawara, “Workload characterization of server-side
                JavaScript”, 2014 IEEE International Symposium on Workload
                Characterization (IISWC) </p>
            <p align='justify'>[4] Stefan Tilkov ; Steve Vinoski, “Node.js: Using JavaScript to Build
                High-Performance Network Programs” , 2010 IEEE Internet
                Computing </p>
            <p align='justify'>[5] Andres Ojamaa ; Karl Düüna, “Assessing the security of Node.js
                platform” 2012 International Conference for Internet Technology and
                Secured Transactions </p>
            <p align='justify'>[6] Zdenek Brabec ; Tomas Cerny ; Jiri Sebek, “On Metadata Extension to
                Derive Data Presentations with Angular 2”, 2016 6th International
                Conference on IT Convergence and Security (ICITCS) </p>
            <p align='justify'>[7] Yunhua Gu; Shu Shen; Jin Wang ; Jeong-Uk Kim, “Application of
                NoSQL database MongoDB” 2015 IEEE International Conference on
                Consumer Electronics - Taiwan </p>
            <p align='justify'>[8] Sharath Gude, Munawar Hafiz, Allen Wirfs-Brock, “JavaScript: The
                Used Parts”, IEEE 38th Annual Computer Software and Applications
                Conference 2014 </p>
            <p align='justify'>[9] Benymol Jose, Sajimon Abraham, “Exploring the merits of nosql: A
                study based on mongodb” 2017 International Conference on Networks
                & Advances in Computational Technologies (NetACT) </p>
            <p align='justify'>[10] Liberies Vokorokos , “MongoDB scheme analysis” 2017 IEEE 21st
                International Conference on Intelligent Engineering Systems (INES) </p>
    </div>
    </div>
    <script>
      // Function to toggle dark mode
      function toggleDarkMode() {
          var body = document.body;
          body.classList.toggle('dark-mode');

          // Toggle button text based on mode
          var darkModeToggle = document.getElementById('darkModeToggle');
          if (body.classList.contains('dark-mode')) {
              darkModeToggle.textContent = ' ☀';
          } else {
              darkModeToggle.textContent = ' ☽';
          }
      }

      // Function to add a book to the library
      function addToLibrary(bookTitle) {
          // Get existing library data from local storage
          var libraryData = localStorage.getItem('library');

          var library = [];
          if (libraryData) {
              library = JSON.parse(libraryData);
          }

          // Check if the library has reached the maximum limit (10 books)
          if (library.length >= 10) {
              alert('You have reached the maximum limit of 10 books in your library.');
              return; // Stop execution if the limit is reached
          }

          library.push(bookTitle);

          localStorage.setItem('library', JSON.stringify(library));

          alert('The book has been added to your library!');

          displayLibrary();
      }

      var prevScrollPos = window.pageYOffset;
      var actionButtons = document.getElementById("actionButtons");

window.onscroll = function() {
    if (window.pageYOffset === 0) {
        actionButtons.style.top = "10px";
        actionButtons.style.display = "flex";
    } else {
        actionButtons.style.top = "-50px"; // Adjust this value based on the button height
        actionButtons.style.display = "none";
    }
}
  </script>
</body>
</html>